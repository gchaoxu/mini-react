(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.client = global.client || {}, global.client.js = factory()));
})(this, (function () { 'use strict';

	const FunctionComponent = 0; // 函数组件
	const HostRoot = 3; // Root Fiber 可以理解为根元素 ， 通过reactDom.render()产生的根元素
	const HostComponent = 5; // dom 元素 比如 <div>
	const HostText = 6; // 文本节点

	const NoFlags = 0b0000000;
	const Placement = 0b0000001;
	const Update = 0b0000010;
	const ChildDeletion = 0b0000100;
	// mutation 阶段需要执行的操作
	const MutationMask = Placement | Update | ChildDeletion;

	/**
	 * *ReactElement 是一种数据结构，将 JSX转换 playground
	 * !ReactElement 如果作为核心模块操作的数据结构，存在的问题：1. 无法表达节点之间的关系；2. 字段有限，不好拓展（比如：无法表达状态）；
	 * *所以，需要一种新的数据结构，他的特点：
	 * 1. 介于ReactElement与真实UI节点之间；
	 * 2. 能够表达节点之间的关系；
	 * 3. 方便拓展（不仅作为数据存储单元，也能作为工作单元）；
	 * */
	class FiberNode {
	    type;
	    tag;
	    pendingProps;
	    key;
	    stateNode;
	    ref;
	    return;
	    sibling;
	    child;
	    index;
	    memoizedProps;
	    memoizedState;
	    alternate;
	    flags;
	    subtreeFlags;
	    updateQueue;
	    constructor(tag, pendingProps, key) {
	        // 实例属性
	        this.tag = tag;
	        this.key = key;
	        // HostComponent <div> 对应的 div DOM
	        this.stateNode = null;
	        // FunctionComponent () => {}
	        this.type = null;
	        /**
	         * !构成树状结构：
	         * *分别指向 父级，兄弟以及子级 fiberNode
	         */
	        this.return = null;
	        this.sibling = null;
	        this.child = null;
	        this.index = 0;
	        this.ref = null;
	        /**
	         * *作为工作单元
	         * pendingProps：记录工作中的 props
	         * memoizedProps：记录工作完之后的 props
	         */
	        this.pendingProps = pendingProps;
	        this.memoizedProps = null;
	        this.memoizedState = null;
	        this.updateQueue = null;
	        /**
	         * !双缓存技术
	         * 对于同一个节点，比较其 ReactElement 与 fiberNode ，生成子 fiberNode；
	         * 当所有 ReactElement 比较完后，会生成一棵 fiberNode 树；一共会存在两棵 fiberNode 树：
	         * 1. current：与视图中真实UI对应的 fiberNode 树
	         * 2. workInProgress：触发更新后，正在 reconciler 中计算的 fiberNode 树
	         */
	        // *当 current 对应真实 UI 的 fiberNode 树时，alternate 对应 workInProgress 正在计算的 fiberNode 树
	        this.alternate = null;
	        // 副作用，记录对应标记 Placement | Update | ChildDeletion
	        this.flags = NoFlags;
	        this.subtreeFlags = NoFlags;
	    }
	}
	class FiberRootNode {
	    container;
	    current;
	    finishedWork;
	    constructor(container, hostRootFiber) {
	        this.container = container;
	        this.current = hostRootFiber;
	        hostRootFiber.stateNode = this;
	        this.finishedWork = null;
	    }
	}
	// 该函数实行双缓存技术，也即函数接收 current，返回对应的 alternate
	const createWorkInProgress = (current, pendingProps) => {
	    let wip = current.alternate;
	    if (wip === null) {
	        // mount
	        wip = new FiberNode(current.tag, pendingProps, current.key);
	        wip.stateNode = current.stateNode;
	        wip.alternate = current;
	        current.alternate = wip;
	    }
	    else {
	        // update
	        wip.pendingProps = pendingProps;
	        wip.flags = NoFlags;
	        wip.subtreeFlags = NoFlags;
	    }
	    wip.type = current.type;
	    wip.updateQueue = current.updateQueue;
	    wip.memoizedProps = current.memoizedProps;
	    wip.memoizedState = current.memoizedState;
	    wip.child = current.child;
	    return wip;
	};
	function createFiberFromElement(element) {
	    const { type, key, props } = element;
	    let fiberTag = FunctionComponent;
	    if (typeof type === 'string') {
	        fiberTag = HostComponent;
	    }
	    else if (typeof type !== 'function' && true) {
	        console.warn('未定义的type类型', element);
	    }
	    const fiber = new FiberNode(fiberTag, props, key);
	    fiber.type = type;
	    return fiber;
	}

	const createUpdate = (action) => {
	    return {
	        action
	    };
	};
	const createUpdateQueue = () => {
	    return {
	        shared: {
	            pending: null
	        }
	    };
	};
	const enqueueUpdate = (updateQueue, update) => {
	    updateQueue.shared.pending = update;
	};
	const processUpdateQueue = (baseState, pendingUpdate) => {
	    const result = {
	        memoizedState: baseState
	    };
	    if (pendingUpdate !== null) {
	        const action = pendingUpdate.action;
	        if (action instanceof Function) {
	            // baseState 1 update (x) => 4x  --> memoizedState 4
	            result.memoizedState = action(baseState);
	        }
	        else {
	            // baseState 1 update 2  --> memoizedState 2
	            result.memoizedState = action;
	        }
	    }
	    return result;
	};

	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	/**
	 * beginWork 性能优化策略（5-1）
	 * 考虑到 reactElement mount 流程完毕之后包含很多的 flags
	 * 相比于执行5次Placment，我们可以构建好「离屏DOM树」后，对div执行1次Placement操作
	 */
	function ChildReconciler(shouldTrackEffects) {
	    function reconcileSingleElement(returnFiber, currentFiber, element) {
	        // 根据 element 创建fiber
	        const fiber = createFiberFromElement(element);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    function reconcileSingleTextNode(returnFiber, currentFiber, content) {
	        const fiber = new FiberNode(HostText, { content }, null);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    function placeSingleChild(fiber) {
	        if (shouldTrackEffects && fiber.alternate === null) {
	            fiber.flags |= Placement;
	        }
	        return fiber;
	    }
	    return function reconcileChildFibers(returnFiber, currentFiber, newChild) {
	        // 判断当前 fiber 的类型
	        if (typeof newChild === 'object' && newChild !== null) {
	            switch (newChild.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFiber, newChild));
	                default:
	                    {
	                        console.warn('未实现的 reconcile 类型', newChild);
	                    }
	                    break;
	            }
	        }
	        // TODO多节点的情况 ul > li*3
	        // HostText
	        if (typeof newChild === 'string' || typeof newChild === 'number') {
	            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFiber, newChild));
	        }
	        {
	            console.warn('未实现的 reconcile 类型', newChild);
	        }
	        return null;
	    };
	}
	const reconcileChildFibers = ChildReconciler(true);
	const mountChildFibers = ChildReconciler(false);

	/**
	 * DFS（深度优先遍历）的顺序遍历 ReactElement，这意味着：
	 * 如果有子节点，遍历子节点；
	 * 如果没有子节点，遍历兄弟节点；
	 * !这是个递归的过程，存在递、归两个阶段：递：对应beginWork；归：对应completeWork
	 */
	const beginWork = (wip) => {
	    /**
	     * *beginWork 函数的作用是：
	     * 比较 ReactElement 和 fiberNode 产生各种标记，
	     * 返回子fiberNode
	     * */
	    switch (wip.tag) {
	        case HostRoot:
	            return updateHostRoot(wip);
	        case HostComponent:
	            return updateHostComponent(wip);
	        case HostText:
	            return null;
	        default:
	            {
	                console.warn('beginWork 未实现的类型');
	            }
	            break;
	    }
	    return null;
	};
	function updateHostRoot(wip) {
	    const baseState = wip.memoizedState;
	    const updateQueue = wip.updateQueue;
	    const pending = updateQueue.shared.pending;
	    updateQueue.shared.pending = null;
	    const { memoizedState } = processUpdateQueue(baseState, pending);
	    wip.memoizedState = memoizedState;
	    const nextChildren = wip.memoizedState;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function updateHostComponent(wip) {
	    const nextProps = wip.pendingProps;
	    const nextChildren = nextProps.children;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function reconcileChildren(wip, children) {
	    const current = wip.alternate;
	    if (current !== null) {
	        // update
	        wip.child = reconcileChildFibers(wip, current?.child, children);
	    }
	    else {
	        // mount （只有在初始化操作中才会有大量的 flags 生成）
	        wip.child = mountChildFibers(wip, null, children);
	    }
	}

	// export const createInstance = (type: string, props: any): Instance => {
	const createInstance = (type) => {
	    // TODO 处理 props
	    const element = document.createElement(type);
	    return element;
	};
	const appendInitialChild = (parent, child) => {
	    parent.appendChild(child);
	};
	const createTextInstance = (content) => {
	    return document.createTextNode(content);
	};
	const appendChildToContainer = appendInitialChild;

	let nextEffect = null;
	const commitMutationEffects = (finishedWork) => {
	    nextEffect = finishedWork;
	    while (nextEffect !== null) {
	        // 向下遍历
	        const child = nextEffect.child;
	        if ((nextEffect.subtreeFlags & MutationMask) !== NoFlags &&
	            child !== null) {
	            nextEffect = child;
	        }
	        else {
	            // 向上遍历 DFS
	            up: while (nextEffect !== null) {
	                commitMutationOnFiber(nextEffect);
	                const sibling = nextEffect.sibling;
	                if (sibling !== null) {
	                    nextEffect = sibling;
	                    break up;
	                }
	                nextEffect = nextEffect.return;
	            }
	        }
	    }
	};
	const commitMutationOnFiber = (finishedWork) => {
	    const flags = finishedWork.flags;
	    if ((flags & Placement) !== NoFlags) {
	        commitPlacement(finishedWork);
	        // 从 flags 中移除 Placement
	        finishedWork.flags &= ~Placement;
	    }
	    // flags Update
	    // flags ChildDeletion
	};
	const commitPlacement = (finishedWork) => {
	    {
	        console.warn('执行Placement', finishedWork);
	    }
	    // parent DOM
	    const hostParent = getHostParent(finishedWork);
	    // finishWork ~~ DOM append parent DOM
	    if (hostParent !== null) {
	        appendPlacementNodeIntoContainer(finishedWork, hostParent);
	    }
	};
	function getHostParent(fiber) {
	    let parent = fiber.return;
	    while (parent) {
	        const parentTag = parent.tag;
	        // HostComponent HostRoot
	        if (parentTag === HostComponent) {
	            return parent.stateNode;
	        }
	        if (parentTag === HostRoot) {
	            return parent.stateNode.container;
	        }
	        parent = parent.return;
	    }
	    {
	        console.warn('未找到host parent');
	    }
	    return null;
	}
	function appendPlacementNodeIntoContainer(finishedWork, hostParent) {
	    // fiber host
	    if (finishedWork.tag === HostComponent || finishedWork.tag === HostText) {
	        appendChildToContainer(hostParent, finishedWork.stateNode);
	        return;
	    }
	    const child = finishedWork.child;
	    if (child !== null) {
	        appendPlacementNodeIntoContainer(child, hostParent);
	        let sibling = child.sibling;
	        while (sibling !== null) {
	            appendPlacementNodeIntoContainer(sibling, hostParent);
	            sibling = sibling.sibling;
	        }
	    }
	}

	const completeWork = (wip) => {
	    // 递归中的归阶段
	    const newProps = wip.pendingProps;
	    const current = wip.alternate;
	    switch (wip.tag) {
	        case HostComponent:
	            if (current && wip.stateNode) ;
	            else {
	                // 1. 构建 DOM
	                // const instance = createInstance(wip.type, newProps);
	                const instance = createInstance(wip.type);
	                // 2. 将 DOM 插入到 DOM 树中
	                appendAllChildren(instance, wip);
	                wip.stateNode = instance;
	            }
	            bobbleProperties(wip);
	            return null;
	        case HostText:
	            if (current && wip.stateNode) ;
	            else {
	                // 1. 构建 DOM
	                const instance = createTextInstance(newProps.content);
	                wip.stateNode = instance;
	            }
	            bobbleProperties(wip);
	            return null;
	        case HostRoot:
	            bobbleProperties(wip);
	            return null;
	        default:
	            {
	                console.warn('未处理的 completeWorlk 情况', wip);
	            }
	            break;
	    }
	};
	function appendAllChildren(parent, wip) {
	    let node = wip.child;
	    while (node !== null) {
	        if (node.tag === HostComponent || node.tag === HostText) {
	            appendInitialChild(parent, node?.stateNode);
	        }
	        else if (node.child !== null) {
	            // 向下查找
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        if (node === wip)
	            return;
	        while (node.sibling === null) {
	            if (node.return === null || node.return === wip)
	                return;
	            // 向上递归
	            node = node?.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	}
	/**
	 * completeWork性能优化策略：flags分布在不同fiberNode中，如何快速找到他们？
	 * 利用completeWork向上遍历（归）的流程，将子fiberNode的flags冒泡到父fiberNode；
	 * */
	function bobbleProperties(wip) {
	    let subtreeFlags = NoFlags;
	    let child = wip.child;
	    while (child !== null) {
	        subtreeFlags |= child.subtreeFlags;
	        subtreeFlags |= child.flags;
	        child.return = wip;
	        child = child.sibling;
	    }
	    wip.subtreeFlags |= subtreeFlags;
	}

	let worklInProgress = null;
	/**
	 * react内部3个阶段：
	 * 1. schedule阶段
	 * 2. render阶段（beginWork completeWork）
	 * 3. commit阶段（commitWork）
	 * */
	function prepareFreshStack(root) {
	    worklInProgress = createWorkInProgress(root.current, {});
	}
	function scheduleUpdateOnFiber(fiber) {
	    // TODO 调度功能
	    // fiberRootNode
	    // 更新可能发生于任意组件，而更新流程是从根节点递归的
	    const root = markUpdateFromFiberToRoot(fiber);
	    renderRoot(root);
	}
	function markUpdateFromFiberToRoot(fiber) {
	    let node = fiber;
	    let parent = node.return;
	    while (parent !== null) {
	        node = parent;
	        parent = node.return;
	    }
	    if (node.tag === HostRoot) {
	        return node.stateNode;
	    }
	    return null;
	}
	function renderRoot(root) {
	    // 初始化
	    prepareFreshStack(root);
	    // 执行递归的操作
	    do {
	        try {
	            workLoop();
	            break;
	        }
	        catch (e) {
	            {
	                console.log('workLoop发生错误', e);
	            }
	            worklInProgress = null;
	        }
	    } while (true);
	    const finishedWork = root.current.alternate;
	    root.finishedWork = finishedWork;
	    // wip fiberNode 树 && 树中的 flags
	    commitRoot(root);
	}
	/**
	 * commit阶段的3个子阶段：
	 * 1. beforeMutation 阶段
	 * 2. mutation 阶段
	 * 3. layout 阶段
	 */
	function commitRoot(root) {
	    const finishedWork = root.finishedWork;
	    if (finishedWork === null) {
	        return;
	    }
	    console.warn('commit 阶段开始', finishedWork);
	    // 重置
	    root.finishedWork = null;
	    // 判断是否存在3个阶段需要执行的操作
	    // root flags  or root subtreeFlags
	    const subtreeHasEffect = (finishedWork.subtreeFlags & MutationMask) !== NoFlags;
	    const rootHasEffect = (finishedWork.flags & MutationMask) !== NoFlags;
	    if (subtreeHasEffect || rootHasEffect) {
	        // beforeMutation
	        // mutation （Placement 对应宿主环境的操作）
	        commitMutationEffects(finishedWork);
	        /**
	         * 双缓存机制发生在 mutation 和 layout 阶段之间
	         * */
	        root.current = finishedWork;
	        // layout
	    }
	    else {
	        root.current = finishedWork;
	    }
	}
	function workLoop() {
	    while (worklInProgress !== null) {
	        performUnitOfWork(worklInProgress);
	    }
	}
	function performUnitOfWork(fiber) {
	    const next = beginWork(fiber);
	    fiber.memoizedProps = fiber.pendingProps;
	    if (next === null) {
	        completeUnitOfWork(fiber);
	    }
	    else {
	        worklInProgress = next;
	    }
	}
	function completeUnitOfWork(fiber) {
	    let node = fiber;
	    do {
	        completeWork(node);
	        const sibling = node.sibling;
	        if (sibling !== null) {
	            worklInProgress = sibling;
	            return;
	        }
	        node = node.return;
	        worklInProgress = node;
	    } while (node !== null);
	}

	// 创建根节点，fiberRootNode
	function createContainer(container) {
	    const hostRootFiber = new FiberNode(HostRoot, {}, null);
	    const root = new FiberRootNode(container, hostRootFiber);
	    hostRootFiber.updateQueue = createUpdateQueue();
	    return root;
	}
	function updateContainer(element, root) {
	    const hostRootFiber = root.current;
	    const update = createUpdate(element);
	    enqueueUpdate(hostRootFiber.updateQueue, update);
	    scheduleUpdateOnFiber(hostRootFiber);
	    return element;
	}

	function createRoot(container) {
	    const root = createContainer(container);
	    return {
	        render(element) {
	            updateContainer(element, root);
	        }
	    };
	}

	var ReactDOM = /*#__PURE__*/Object.freeze({
		__proto__: null,
		createRoot: createRoot
	});

	return ReactDOM;

}));
